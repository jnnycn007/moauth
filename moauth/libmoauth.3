.TH libmoauth 3 "mOAuth API Reference" "2019-01-19" "mOAuth API Reference"
.SH NAME
libmoauth \- mOAuth API Reference
.SH Introduction
.PP
The "moauth" library provides a simple API for performing OAuth 2.0 authorization. A single <moauth.h> header file needs to be included in your code:
.nf

    #include <moauth.h>
.fi
.PP
When linking your program, include both the "moauth" and "cups" libraries, for example:
.nf

    gcc \-o myprogram myprogram.c \-lmoauth \-lcups
.fi
.SH Getting Started
.PP
The connection to the OAuth Authorization Server is represented by a moauth_t pointer. Provide the URI for the server to the moauthConnect function to create a connection to the server:
.nf

    moauth_t *server = moauthConnect("https://oauth.example.net");
.fi
.PP
When you are done communicating with the server, use the moauthClose function to close the connection to the server:
.nf

    moauthClose(server);
.fi
.PP
To authorize access, call the moauthAuthorize function, which handles opening a web browser as needed:
.nf

    extern int
    moauthAuthorize(moauth_t *server,
                    const char *redirect_uri,
                    const char *client_id,
                    const char *state,
                    const char *code_verifier,
                    const char *scope);
.fi
.PP
Typically the redirect_uri will use a scheme related to your program name, for example "myprogram://authorize" \- these URI schemes must be registered with the local operating system. You can also use "https" URIs pointing to the local system, assuming that you have a local service running, however registering clients using local addresses and port numbers can be tricky \- most "native" applications use a custom URI scheme.
.PP
TODO: Add example registration process/links for Linux and macOS/iOS.

.PP
The client_id string is an identifier that is provided when you register your application with the OAuth provider, for example "5C87D618\-A5AE\-4A48\-B04B\-E1BCE501ED75".
.PP
The state string is some data you provide for local state tracking, for example "Snoopy".
.PP
The code_verifier string is used to prevent man\-in\-the\-middle attacks and should be a random string, for example "aBrh14x01\-fjh552".
.PP
The scope string is used to request specific privileges. If NULL the authorization server will grant the default privileges.
.PP
Putting that all together yields the following example code:
.nf

    if (!moauthAuthorize(server, "myprogram://authorize",
                         "5C87D618\-A5AE\-4A48\-B04B\-E1BCE501ED75", "Snoopy",
                         "aBrh14x01\-fjh552", NULL))
        fprintf(stderr, "Unable to authorize access: %s\\n", moauthErrorString(server));
.fi
.PP
Once authorization is complete your program will be notified using the redirect URI followed by several form variables, for example:
.nf

    myprogram://authorize?code=ABCDEFG0123456789&state=Snoopy
.fi
.PP
Your program needs to verify the state string matches what you used in the initial authorization request ("Snoopy") and then uses the code value to request an access token using the moauthGetToken function:
.nf

    extern char *
    moauthGetToken(moauth_t *server,
                   const char *redirect_uri,
                   const char *client_id,
                   const char *grant,
                   const char *code_verifier,
                   char *token,
                   size_t tokensize,
                   char *refresh,
                   size_t refreshsize,
                   time_t *expires);
.fi
.PP
The server, redirect_uri, client_id, and code_verifier arguments are the same as before.
.PP
The grant string is the "code" value from the redirect URI your program received.
.PP
The token argument is a pointer to a character buffer of tokensize bytes and will be filled with the access token.
.PP
The refresh argument is a pointer to a character buffer of refreshsize bytes and will be filled with a refresh token, if any. If you don't care about the refresh token you can pass NULL and 0 for these arguments.
.PP
The expires argument is a pointer to a time_t variable and will be filled with the expiration date/time for the access token. If you don't care about the expiration date/time you can pass NULL.
.PP
For example:
.nf

    char access_token[1024];
    
    if (!moauthGetToken(server, "myprogram://authorize",
                        "5C87D618\-A5AE\-4A48\-B04B\-E1BCE501ED75",
                        "ABCDEFG0123456789", "aBrh14x01\-fjh552",
                        access_token, sizeof(access_token),
                        NULL, 0, NULL))
        fprintf(stderr, "Unable to get access token: %s\\n", moauthErrorString(server));
    else
        printf("Access token is \\"%s\\".\\n", access_token);
.fi

.SH FUNCTIONS
.SS moauthAuthorize
Open the authorization web page for an OAuth server.
.PP
.nf
int  moauthAuthorize (
    moauth_t *server,
    const char *redirect_uri,
    const char *client_id,
    const char *state,
    const char *code_verifier,
    const char *scope
);
.fi
.PP
This function returns as soon as the web page has been opened.
.PP
The "code_verifier" string is transformed using the S256 method.
.SS moauthClose
Close an OAuth server connection.
.PP
.nf
void moauthClose (
    moauth_t *server
);
.fi
.SS moauthConnect
Open a connection to an OAuth server.
.PP
.nf
moauth_t * moauthConnect (
    const char *oauth_uri
);
.fi
.SS moauthErrorString
Return a description of the last error that occurred,
if any.
.PP
.nf
const char * moauthErrorString (
    moauth_t *server
);
.fi
.SS moauthGetToken
Get an access token from a grant from the OAuth server.
.PP
.nf
char * moauthGetToken (
    moauth_t *server,
    const char *redirect_uri,
    const char *client_id,
    const char *grant,
    const char *code_verifier,
    char *token,
    size_t tokensize,
    char *refresh,
    size_t refreshsize,
    time_t *expires
);
.fi
.SS moauthIntrospectToken
Get information about an access token.
.PP
.nf
int  moauthIntrospectToken (
    moauth_t *server,
    const char *token,
    char *username,
    size_t username_size,
    char *scope,
    size_t scope_size,
    time_t *expires
);
.fi
.SS moauthPasswordToken
Get an access token using a username and password
(if supported by the OAuth server)
.PP
.nf
char * moauthPasswordToken (
    moauth_t *server,
    const char *username,
    const char *password,
    const char *scope,
    char *token,
    size_t tokensize,
    char *refresh,
    size_t refreshsize,
    time_t *expires
);
.fi
.SS moauthRefreshToken
Refresh an access token from the OAuth server.
.PP
.nf
char * moauthRefreshToken (
    moauth_t *server,
    const char *refresh,
    char *token,
    size_t tokensize,
    char *new_refresh,
    size_t new_refreshsize,
    time_t *expires
);
.fi
.SS moauthRegisterClient
Register a client application.
.PP
.nf
char * moauthRegisterClient (
    moauth_t *server,
    const char *redirect_uri,
    const char *client_name,
    const char *client_uri,
    const char *logo_uri,
    const char *tos_uri,
    char *client_id,
    size_t client_id_size
);
.fi
.SH TYPES
.SS moauth_t
OAuth server connection
.PP
.nf
typedef struct _moauth_s moauth_t;
.fi
.SH AUTHOR
.PP
Michael R Sweet
.SH COPYRIGHT
.PP
Copyright (c) 2017-2019
